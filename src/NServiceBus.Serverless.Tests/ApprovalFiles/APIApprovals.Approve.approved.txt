namespace NServiceBus.Serverless
{
    public abstract class ServerlessEndpoint<TExecutionContext, TConfiguration>
        where TConfiguration : NServiceBus.Serverless.ServerlessEndpointConfiguration
    {
        protected ServerlessEndpoint(System.Func<TExecutionContext, TConfiguration> configurationFactory) { }
        protected virtual System.Threading.Tasks.Task Initialize(TConfiguration configuration) { }
        protected System.Threading.Tasks.Task InitializeEndpointIfNecessary(TExecutionContext executionContext, System.Threading.CancellationToken token = null) { }
        public System.Threading.Tasks.Task Process(NServiceBus.Transport.MessageContext messageContext, TExecutionContext executionContext) { }
        public System.Threading.Tasks.Task<NServiceBus.Transport.ErrorHandleResult> ProcessFailedMessage(NServiceBus.Transport.ErrorContext errorContext, TExecutionContext executionContext) { }
    }
    public abstract class ServerlessEndpointConfiguration
    {
        protected ServerlessEndpointConfiguration(string endpointName) { }
        public NServiceBus.EndpointConfiguration AdvancedConfiguration { get; }
        public void DoNotSendMessagesToErrorQueue() { }
        public NServiceBus.Serialization.SerializationExtensions<T> UseSerialization<T>()
            where T : NServiceBus.Serialization.SerializationDefinition, new () { }
        protected NServiceBus.TransportExtensions<TTransport> UseTransport<TTransport>()
            where TTransport : NServiceBus.Transport.TransportDefinition, new () { }
    }
}