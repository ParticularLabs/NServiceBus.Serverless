namespace NServiceBus.Serverless
{
    public abstract class ServerlessEndpoint<TExecutionContext>
    {
        protected ServerlessEndpoint(System.Func<TExecutionContext, NServiceBus.Serverless.ServerlessEndpointConfiguration> configurationFactory) { }
        public System.Threading.Tasks.Task Process(NServiceBus.Transport.MessageContext message, TExecutionContext executionContext) { }
        public System.Threading.Tasks.Task ProcessFailedMessage(NServiceBus.Transport.ErrorContext errorContext, TExecutionContext executionContext) { }
    }
    public abstract class ServerlessEndpointConfiguration
    {
        protected ServerlessEndpointConfiguration(string endpointName) { }
        public NServiceBus.EndpointConfiguration AdvancedConfiguration { get; }
        public void SendFailedMessageToErrorQueue(string errorQueueName = "error") { }
        public NServiceBus.Serialization.SerializationExtensions<T> UseSerialization<T>()
            where T : NServiceBus.Serialization.SerializationDefinition, new () { }
        public NServiceBus.TransportExtensions<TTransport> UseTransportForDispatch<TTransport>()
            where TTransport : NServiceBus.Transport.TransportDefinition, new () { }
    }
}